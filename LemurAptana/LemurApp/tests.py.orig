"""
This file demonstrates two different styles of tests (one doctest and one
unittest). These will both pass when you run "manage.py test".

Replace these with more appropriate tests for your application.
"""

from django.test import TestCase
from django.test.client import Client
from django.core.exceptions import ValidationError, ObjectDoesNotExist
import models
import datetime
import amazonproduct
import settings

class OrderTest(TestCase):
    
    @staticmethod
    def create_inmate():
        # create dummy inmate
        i = models.Inmate()
        i.first_name = "No"
        i.last_name = "Body"
        i.inmate_id = "A12345"
        i.facility = models.Facility.get_non_facility()
        i.address = "Boo"
        i.full_clean()
        i.save()
        return i
    
    @staticmethod
    def create_order_1():
        """ Create an inmate, one order for that inmate, and one book for that order
            Returns the order object.
        """
        i = OrderTest.create_inmate()
        # create dummy order 1
        o1 = models.Order()
        o1.inmate = i
        o1.save()
        o1.date_closed = datetime.datetime.now()
        o1.status = 'SENT'
        o1.save()
        # ...with 1 dummy book
        b1 = models.Book()
        b1.title = "dictionary"
        b1.order = o1
        b1.save()
        return o1
    
    @staticmethod
    def create_order_2(i):
        """Creates a dummy order for the given inmate with a single dictionary in it"""
        # create dummy order 2
        o2 = models.Order()
        o2.inmate = i
        o2.save()
        o2.status = 'SENT'
        o2.date_closed = datetime.datetime.now()
        o2.save()
        # ...with 1 dummy book
        b2 = models.Book()
        b2.title = "dictionary"
        b2.order = o2
        b2.full_clean()
        b2.save()
        return o2
    
    def test_order_warnings(self):
        """
        Tests that the proper warnings are returned for orders
        """
        
        o1 = OrderTest.create_order_1()
        
        # make sure there are no warnings now, one clean order
        self.assertEquals(len(o1.warnings()), 0)
        
        o2 = OrderTest.create_order_2(o1.inmate)
        
        # make sure there is a prior-order warning
        self.assertTrue("Patron received an order less than 3 months ago" in o2.warnings())
        
        # make sure there's a prior-book warning
        self.assertTrue(True in ["Patron already received" in warning for warning in o2.warnings()])
        self.assertFalse(True in ["blah blah blah this isn't a warning" in warning for warning in o2.warnings()])
        
        # make sure we haven't triggerd the same-book warning
        self.assertFalse(True in ["Two books in this" in warning for warning in o2.warnings()])
        
        # Add another book
        b3 = models.Book()
        b3.order = o2
        b3.title = "dictionary"
        b3.full_clean()
        b3.save()
        
        # ...and test if it triggers the same-book warning
        self.assertTrue(True in ["Two books in this" in warning for warning in o2.warnings()])
                
    
    def test_inmate_duplicate(self):
        #i = OrderTest.create_inmate()
        #self.assertRaises(ValidationError, OrderTest.create_inmate())
        pass
    
    def test_order_cleanup(self):
        """Tests that the order cleanup happens correctly"""
        
        # clean slate
        models.Order.objects.all().delete()
        models.Inmate.objects.all().delete()
        models.Book.objects.all().delete()
                
        # create an open order
        i = OrderTest.create_inmate()
        o1 = models.Order()
        o1.inmate = i
        o1.save()
        pk1 = o1.pk
        
        # create a second open order, this one with a book
        o2 = models.Order()
        o2.inmate = i
        o2.save()
        b1 = models.Book()
        b1.title = "dictionary"
        b1.order = o2
        b1.save()
        
        # ensure that the first two orders are open
        self.assertEquals(o1.status, 'OPEN')
        self.assertEquals(o2.status, 'OPEN')
        
        # create a third, sent order, ensure its closed
        o3 = OrderTest.create_order_2(i)
        self.assertEquals(o3.status, 'SENT')
        
        c = Client()
        response = c.get('/lemur/order/cleanup/')
        
        # now the open order o1 should be gone
        self.assertRaises(models.Order.DoesNotExist, models.Order.objects.get, pk=pk1)
        # now the open order o2 should be sent
        o2_again = models.Order.objects.get(pk=o2.pk)
        self.assertEquals(o2_again.status, 'SENT')
        # now the sent order o3 should be the same
        o3_again = models.Order.objects.get(pk=o3.pk)
        self.assertEquals(o3_again.status, 'SENT')
        
    def test_unicode_errors(self):
        """Makes sure that funny characters don't mess up the template system"""
        c = Client()
        response = c.get('/lemur/order/build/?whichForm=search&csrfmiddlewaretoken=3ff87b8c8ea9d6ae6f2797eaa30509f4&title=harry%20potter&page=3&author=rowling')
        # if this page loads fine then we're OK
    
    def test_unicode_errors_db(self):
        order = OrderTest.create_order_1()
        book = models.Book.get_book('8478889019')
        book.order = order
        book.save()
        
        


