
###
###   Lemur v2.0
###   Books to Prisoners Inventory System
###
###   Tom Wiltzius, tom.wiltzius%gmail.com
###   Oct 2010-2016
###

Python dependencies listed in requirements.txt

Also requires a yarn, webpack, and MySQL or sqlite

To run tests:
`./manage.py test`


To run the server locally:
-) sudo apt install -y default-libmysqlclient-dev pkg-config npm python3-pip python3-docutils python3-levenshtein python3-setuptools mariadb-server
-) sudo npm install --global yarn
-) install client deps with `yarn` in root directory
-) install webpack globally if it isn't with `yarn global add webpack` (webpack 2.5.1 works)
-) Build/watch webpack assets with `./node_modules/webpack/bin/webpack.js` in base project directory
-) If you want to use a virtual environment:
  -) sudo apt install python3-venv
  -) python3 -m venv .
  -) . bin/activate
  -) pip install -r requirements.txt
-) If you want do not want to use a virtual environment:
  -) pip install -r requirements.txt --break-system-packages
-) set up MySQL/MariaDB (see section below for details)
-) set up settings_secret.py; use SqlLite database
  -) cp LemurAptana/settings_secret_template.py LemurAptana/settings_secret.py
  -) vim LemurAptana/settings_secret.py
-) Run `python3 manage.py migrate` to set up the database tables
-) Edit ALLOWED_HOSTS in LemurAptana/settings.py to contain 'localhost'
-) Run development server with `./manage.py runserver 0.0.0.0:8000`
-) Browse to http://localhost:8000/ in your web browser of choice

After this is done, the Lemur web app should appear in your browser. You will
need to do some administration before it will work corectly. See the section
below labeled "Administration setup" for more information.

# MySQL / MariaDB Setup
For mysql/mariadb, to create a user run `sudo mysql` and run this:

```sql
CREATE USER 'username'@'localhost' IDENTIFIED BY 'password';
CREATE DATABASE IF NOT EXISTS lemur;
GRANT ALL PRIVILEGES ON lemur.* TO 'username'@'localhost';
GRANT ALL PRIVILEGES ON test_lemur.* TO 'username'@'localhost';
SHOW GRANTS FOR 'username'@'localhost';
exit
```

To get an SQL prompt as that user: `mysql -u username -p`

# Development access
Note: if you want to access your local dev server from another computer, add
`ALLOWED_HOSTS = ['192.168.1.37']` to LemurAptana/settings.py (swapping in the
server's IP address or FQDN in place of the example IP address)

# Production access

## Setup

Check out the repo, and then run the following commands in the root of the repo.

```
# Check out the code
git clone https://github.com/hax0rbana-adam/btp-lemur
cd btp-lemur

# Install the dependencies
sudo apt install -y default-libmysqlclient-dev pkg-config npm python3-pip python3-docutils python3-levenshtein python3-setuptools mariadb-server python3-virtualenv python3-venv nginx python3-django-uwsgi
sudo npm install --global yarn
yarn
yarn global add webpack
./node_modules/webpack/bin/webpack.js

# Set up the virtual environment
python3 -m venv .
. bin/activate
pip install -r requirements.txt

# Set up the database
echo "CREATE USER 'username'@'localhost' IDENTIFIED BY 'password';
CREATE DATABASE IF NOT EXISTS lemur;
GRANT ALL PRIVILEGES ON lemur.* TO 'username'@'localhost';
GRANT ALL PRIVILEGES ON test_lemur.* TO 'username'@'localhost';
SHOW GRANTS FOR 'username'@'localhost';
exit" | sudo mysql

# Configure the application
cp LemurAptana/settings_secret_template.py LemurAptana/settings_secret.py
sed -e "s/'ENGINE': 'django.db.backends.sqlite3'/'ENGINE': 'django.db.backends.mysql'/" -i LemurAptana/settings_secret.py
sed -e "s/'NAME': 'sqlite.db'/'NAME': 'lemur'/" -i LemurAptana/settings_secret.py
sed -e "s/# 'USER': ''/'USER': 'username'/" -i LemurAptana/settings_secret.py
sed -e "s/# 'PASSWORD': ''/'PASSWORD': 'password'/" -i LemurAptana/settings_secret.py
sed -e "s/ALLOWED_HOSTS.*/ALLOWED_HOSTS = ['127.0.0.1']/" -i LemurAptana/settings.py

# Set up the database and static files
python3 manage.py migrate
python3 manage.py collectstatic
deactivate
cd ..

# Move the files into /var/www so the www-data user can access them
sudo mv btp-lemur /var/www
sudo chown -R www-data:www-data /var/www/btp-lemur

# Configure nginx to point to our static files and the uWSGI socket
sudo cp /var/www/btp-lemur/nginx-default.conf /etc/nginx/sites-available/default
sudo systemctl restart nginx

# Optional: Browse to http://127.0.0.1/static/css/style.css as a test

# Set up uwsgi as a systemd service to run Lemur
sudo cp /var/www/btp-lemur/uwsgi-lemur.service /etc/systemd/system/
sudo systemctl enable uwsgi-lemur.service
sudo systemctl start uwsgi-lemur.service
sudo systemctl status uwsgi-lemur.service
```

At this point the uwsgi-lemur service should be running, there should be a
lemur.sock file that nginx can connect to, it should be owned by www-data and
in the www-data group, and permissions should be 600.  You should now be able
to navigate to http://127.0.0.1 and see Lemur.

At this point an admin should go in and set up the database at
http://127.0.0.1/admin as described in the "Administration setup" section
below.

If something goes wrong, here are some tips for debugging:

```
. bin/activate
uwsgi --http :8000 --module LemurAptana.wsgi
# browse to localhost:8000 to verify uWSGI & Django are working as expected
# if everything looks good, stop any uwsgi services that might be running
# and manually start up uwsgi to verify that's working as expected
uwsgi_python3 --ini uwsgi.ini --chmod-socket=666
```

For more information, see the
[Django and nginx tutorial](https://uwsgi-docs.readthedocs.io/en/latest/tutorials/Django_and_nginx.html).

## Management
To manage the server in production:
-) Various packages need be installed, including: `apt-get install libffi-dev`
-) Use lemur-fcgi.conf in /etc/init/
-) Query service status, restart, etc with `sudo initctl status lemur-fcgi`
-) Rebuild client, run migrations, and restart service with `./production_restart.sh`

Machine dependencies:
-) yarn
-) webpack
-) MySQL or sqlite
-) Ability to build python3 lxml from source or install system package (e.g. ubuntu python3-lxml)
-) libssl-dev on Linux

# Updating node dependencies
To see the updates available for node, run the following:

```sh
sudo npm i -g npm-check-updates
ncu -u
```

# Administration setup
When you run the migrate command, the database schema will be created automatically, however it will not have all of the data filled out for the application to run. After attempting to run the app once, you'll need to log in as an administrator to create some records in the database.

## Admin user
From a shell, run this:

`python3 manage.py createsuperuser --username=joe --email=joe@example.com`

Ref: https://docs.djangoproject.com/en/5.0/topics/auth/default/#creating-users

After creating the admin user, log in as the admin and follow the steps below.
The admin login is at '/admin' (e.g. http://localhost:8000/admin#).

## Other facility
Create a Facility called "Other". This needs to be the first entry created (or, more specifically, it needs to have a primary key of 1) and it is special cased in the code to force the user to enter the address of an unknown facility. No inmates can be added until at least one facility exists.

## Banner
Add a banner. This will appear at the top of each page.
